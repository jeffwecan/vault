#!/usr/bin/env python
import logging
import os
from argparse import ArgumentParser
from getpass import getpass


import hvac
import yaml

SECRET_TEMPLATES_DIR = '/etc/wpengine/vault/secret_templates'
VAULT_CA = '/usr/share/ca-certificates/wpengine/vault_ca.crt'
VAULT_CERT = '/etc/vault.d/ssl/bundle.crt'
VAULT_KEY = '/etc/vault.d/ssl/vault.key'
VAULT_TOKEN_PATH = '/root/.vault-token'


def main():
    parser = ArgumentParser(
        description='Helper script for initially populating vault secrets'
    )
    parser.add_argument('-r', '--reinitialize', action='store_true', dest='reinitialize', default=False, help='prompt for values even if they already exist')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False, help='verbose mode')
    args = parser.parse_args()

    logging.basicConfig(
        level=logging.DEBUG if args.verbose else logging.INFO,
        format='InitVaultSecrets: %(asctime)s - %(levelname)s - %(message)s',
    )

    vault_client = hvac.Client(url='https://127.0.0.1:8200', cert=(VAULT_CERT, VAULT_KEY), verify=VAULT_CA)

    if os.path.isfile(VAULT_TOKEN_PATH):
        info_msg = 'Using existing token found at {VAULT_TOKEN_PATH}. lease ensure this token is cleaned up after use!'
        logging.info(info_msg.format(VAULT_TOKEN_PATH=VAULT_TOKEN_PATH))
        with open(VAULT_TOKEN_PATH, 'r') as f:
            vault_token = f.readline().strip()
    else:
        logging.info('No token found at {VAULT_TOKEN_PATH}.'.format(VAULT_TOKEN_PATH=VAULT_TOKEN_PATH))
        vault_token = getpass(prompt='Enter vault token: ')

    vault_client.token = vault_token
    assert vault_client.is_authenticated(), 'Unable to authenticate to vault with the provided token'

    logging.debug('Scanning {}, found {}'.format(SECRET_TEMPLATES_DIR, os.listdir(SECRET_TEMPLATES_DIR)))
    for secret_template_file in os.listdir(SECRET_TEMPLATES_DIR):
        logging.debug('template filename: {}'.format(secret_template_file))
        secret_base = secret_template_file.split('.')[0]  # no file extension needed for this purpose
        with open(os.path.join(SECRET_TEMPLATES_DIR, secret_template_file), 'r') as stream:
            template_contents = yaml.load(stream)
            logging.debug(template_contents)
            for secret_prefix, secret_names in template_contents.iteritems():
                secret_path = 'secret/{base}/{prefix}'.format(base=secret_base, prefix=secret_prefix)
                current_secret = vault_client.read(secret_path)
                current_values = {}
                secret_values = {}
                if current_secret:
                    current_values = current_secret.get('data')
                    secret_values.update(current_values)
                    logging.debug('Current values under path {}:\n{}'.format(secret_path, current_values))
                for secret_name in secret_names:
                    if secret_name in current_values and not args.reinitialize:
                        continue
                    secret_value = getpass(prompt='Enter value for the "{}" secret (under path "{}"): '.format(secret_name, secret_path))
                    if not secret_value:
                        logging.info('No value provided, defaulting to previous value')
                    else:
                        secret_values[secret_name] = secret_value

                vault_client.write(secret_path, **secret_values)

    if os.path.isfile(VAULT_TOKEN_PATH):
        os.unlink(VAULT_TOKEN_PATH)


if __name__ == '__main__':
    main()
