# WP Engine environment configuration information.

# Test block used for unit testing this file.  Please leave it in place.
[test]
unit_test = dont-change-me

### BEGIN GLOBAL SECTION
{# Entries in this section will be pushed to EVERY SERVER #}
[wpe]
domain = {{ wpengine_domain }}
outbound_mail_domain = {{ postfix_domain }}
{% if is_development is defined and is_development %}
environment = dev

failover_domain = {{ failover_domain|default('wpenginedev.com') }}
pod_base = {{ pod_base }}
api1 = {{ api1 }}
api = {{ api }}
api_domain = {{ api_domain }}
{% endif %}

{% if is_development is defined and is_development and not is_vagrant %}
[wpe_locations]
domain = {{ wpengine_domain }}
domain_base = {{ wpengine_domain }}
environment = dev
failover_domain = {{ wpengine_domain }}
pod_base = {{ wpengine_domain }}
api_domain = api.{{ wpengine_domain }}
api = https://api.{{ wpengine_domain }}
api1 = https://api.{{ wpengine_domain }}/1.2
api2 = https://api2.{{ wpengine_domain }}
portal_api = https://{{ creds.dev_mystaging_wpengine_com.site }}/api
{% if corporate is defined %}
salesforce_url = {{ corporate.creds.salesforce.url }}
{% endif %}
{% endif %}

{% if creds.dms.token is defined %}
[dms]
base_url = {{ dms_base_url }}
token = {{ creds.dms.token }}
{% endif %}

[acme_validation]
base_url = {{ acme_validation_url }}

[amazon_s3]
access_key = {{ creds.amazon.access_key }}
secret_key = {{ creds.amazon.secret_key }}

[api2_client]
base_url = {{ api2_client }}

[api_glues]
0 = {{ creds.api_glues.latest }}
{% if my.roles.api is defined %}{# API servers have the previous key to enable safe cred rolling #}
1 = {{ creds.api_glues.previous }}
{% endif %}

[admin_keys]
0 = {{ creds.admin_keys.latest }}
{% if my.roles.api is defined %}
1 = {{ corporate.creds.admin_keys.previous }}
autoscalewatcher0 = {{ corporate.creds.admin_keys.autoscalewatcher0 }}
autoscalewatcher1 = {{ corporate.creds.admin_keys.autoscalewatcher1 }}
controlplane0 = {{ corporate.creds.admin_keys.controlplane0 }}
controlplane1 = {{ corporate.creds.admin_keys.controlplane1 }}
dms = {{ corporate.creds.admin_keys.dms }}
gitpush = {{ corporate.creds.admin_keys.gitpush }}
iperf0 = {{ corporate.creds.admin_keys.iperf0 }}
iperf1 = {{ corporate.creds.admin_keys.iperf1 }}
mywpe0 = {{ corporate.creds.admin_keys.mywpe }}
mywpev1 = {{ corporate.creds.admin_keys.mywpev1 }}
signup0 = {{ corporate.creds.admin_keys.signup }}
signup1 = {{ corporate.creds.admin_keys.signup1 }}
zendesk0 = {{ corporate.creds.admin_keys.zendesk }}
zendesk1 = {{ corporate.creds.admin_keys.zendesk1 }}
sysadmin0 = {{ corporate.creds.admin_keys.sysadmin }}
sysadmin1 = {{ corporate.creds.admin_keys.sysadmin1 }}
jwstats = {{ corporate.creds.admin_keys.jwstats }}
servercm = {{ corporate.creds.admin_keys.servercm }}
{% endif %}
{% if my.roles.api is defined or my.roles.overdrive is defined %}
overdrive = {{ corporate.creds.admin_keys.overdrive }}
{% endif %}

{% if is_development is defined and is_development and not is_vagrant %}
[my_wpengine_com]
0 = "{{ creds.dev_my_wpengine_com.key }}"
{% else %}
[my_wpengine_com]
0 = {{ creds.my_wpengine_com.latest }}
{% endif %}

# Provides credentials to access the wpengine.com zone.
[cloudflare]
base_url = https://loafed-curl.wpengine.io
user = {{ creds.cloudflare.user }}
authkey = {{ creds.cloudflare.authkey }}
zone = {{ creds.cloudflare.zone }}
zoneid = {{ creds.cloudflare.zoneid }}
email = {{ creds.cloudflare.email }}
key = {{ creds.cloudflare.key }}

# Provides credentials to access the wpengine.net zone.
[cloudflare2]
base_url = https://loafed-curl.wpengine.io
user = {{ creds.cloudflare2.user }}
authkey = {{ creds.cloudflare2.authkey }}
zone = {{ creds.cloudflare2.zone }}
zoneid = {{ creds.cloudflare2.zoneid }}
email = {{ creds.cloudflare2.email }}
key = {{ creds.cloudflare2.key }}

[dnsprovider]
primary = {{ creds.dnsprovider.primary }}

[github]
wpenginebot = {{ creds.github.wpenginebot }}

[hubspot]
base_url_api = {{ creds.hubspot.base_url_api }}
base_url_forms = {{ creds.hubspot.base_url_forms }}
apikey = {{ creds.hubspot.apikey }}

[hipchat]
key = {{ creds.hipchat.key }}

[largefs]
key = {{ creds.largefs.key }}
secret = {{ creds.largefs.secret }}

[memcache]
{% if memcache_host is defined %}
host = {{ memcache_host }}
{% elif cluster.memcache_host is defined %}
host = {{ cluster.memcache_host }}
{% else %}
host = {{ creds.memcache.host }}
{% endif %}
port = {{ creds.memcache.port }}
{% if my.roles.mcrouter is defined %}
mcrouter_port = {{ mcrouter_port }}
{% endif %}

[mysql_replication]
{% if cmdb_user is defined %}
user = {{ cmdb_user }}
pass = "{{ cmdb_pass }}"
{% else %}
user = {{ creds.mysql_replication.user }}
pass = "{{ creds.mysql_replication.pass }}"
{% endif %}

[mysql_root]
{% if 'corporate' in group_names %}
{% if cmdb_user is defined %}
user = {{ cmdb_user }}
pass = "{{ cmdb_pass }}"
host = {{ cmdb_host }}
schema = {{ cmdb_schema }}
{% endif %}
{% else %}
{% if 'amazon' in group_names %}
user = {{ creds.mysql_root.awsuser }}
{% else %}
user = {{ creds.mysql_root.user }}
{% endif %}
pass = "{{ creds.mysql_root.pass }}"
{% endif %}

{% if creds.newrelic_support_license_key is defined %}
# TOPS-4504, used by regen for newrelic fallback configuration when customer lacks a key
[newrelic_support]
license_key = {{ creds.newrelic_support_license_key }}
{% endif %}

{# The following keys should be moved to corporate upon verification of corporate-only usage #}
[netdna]
alias = {{ creds.netdna.alias }}
key = {{ creds.netdna.key }}
secret = {{ creds.netdna.secret }}

[nova_aws]
key = {{ creds.nova_aws.key }}
secret = {{ creds.nova_aws.secret }}
region = {{ creds.nova_aws.region }}

{% if my.roles.jenkins_master is defined or my.roles.jenkins_node is defined %}
[qa_jira]
baseURL = {{ group_creds_jenkins_servers_qa_base_url }}
username = {{ group_creds_jenkins_servers_qa_jira_user }}
password = {{ group_creds_jenkins_servers_qa_jira_pw }}
{% endif %}

[recurly]
apikey = {{ creds.recurly.api_key }}
privatekey = {{ creds.recurly.private_key }}
subdomain = {{ creds.recurly.subdomain }}

[tract]
user = {{ creds.tract.user }}
password = "{{ creds.tract.password }}"
user_bak = {{ creds.tract.user_bak }}
password_bak = {{ creds.tract.password_bak }}
url = {{ creds.tract.url }}
tractNS = {{ creds.tract.ns }}
active = 'true';
deactivated = 'true';

[webpagetest]
api_key = {{ creds.webpagetest.api_key }}

[zendesk]
subdomain = {{ creds.zendesk.subdomain }}
username = {{ creds.zendesk.username }}
token = {{ creds.zendesk.token }}
user = {{ creds.zendesk.user }}
pass = {{ creds.zendesk.pass }}

# END GLOBAL SECTION

{# All items in this section MUST be using the corporate.yml 'corporate' namespace, or we're already leaking them to the farm via creds.yml #}
{% if 'corporate' in group_names %}
# BEGIN CORPORATE-ONLY SECTION
{# #}
{# Please maintain alphabetization for organizational purposes #}

[api2_aws]
key = {{ corporate.creds.aws.api2.key }}
secret = {{ corporate.creds.aws.api2.secret }}
region = {{ corporate.creds.aws.api2.region }}

[aws_dynamodb_sitemonitor]
access_key_id = {{ corporate.creds.aws_dynamodb_sitemonitor.access_key_id }}
access_secret_key = {{ corporate.creds.aws_dynamodb_sitemonitor.access_secret_key }}

[bapi]
url = {{ corporate.creds.bapi.url }}
user = {{ corporate.creds.bapi.user }}
pass = {{ corporate.creds.bapi.pass }}
auth_url = {{ corporate.creds.bapi.auth_url }}
billing_system = {{ corporate.creds.bapi.billing_system }}
{% if is_development is defined and is_development %}
product_catalog = {{ corporate.creds.bapi.product_catalog }}
{% endif %}

[builtwith]
key = {{ corporate.creds.builtwith.key }}

{% if cmdb_user is defined %}
[cmdb]
user = {{ cmdb_user }}
pass = "{{ cmdb_pass }}"
host = {{ cmdb_host }}
read_host = {{ cmdb_read_host }}
schema = {{ cmdb_schema }}
{% endif %}

[dropbox]
app_key = {{ corporate.creds.dropbox.app.key }}
app_secret = {{ corporate.creds.dropbox.app.secret }}

[dropbox_storage]
key = {{ corporate.creds.dropbox.storage.key }}
secret = {{ corporate.creds.dropbox.storage.secret }}

[ehawk]
version = {{ corporate.creds.ehawk.version }}
apikey = {{ corporate.creds.ehawk.apikey }}

[geoip]
office_key = {{ corporate.creds.geoip.office_key }}
cron_key = {{ corporate.creds.geoip.cron_key }}

[google]
key = {{ corporate.creds.google.key }}
secret = {{ corporate.creds.google.secret }}

{% if cmdb_host is defined %}
[mysql_overdrive]
host = {{ cmdb_host }}
user = {{ cmdb_user }}
pass = '{{ cmdb_pass }}'
{% endif %}

[newrelic]
key = {{ corporate.creds.new_relic.key }}
{% if new_relic_api_key is defined %}
api-key = {{ new_relic_api_key }}
{% endif %}

[newrelic_partner]
# Used for NR Partner API to manage customer subaccounts, not by application agents
account_number = {{ corporate.creds.newrelic_partner.account_number }}
partnership_id = {{ corporate.creds.newrelic_partner.partnership_id }}
api_key = {{ corporate.creds.newrelic_partner.api_key }}

[notification_keys]
dns_failover_key = {{ creds.notification_keys.dns_failover_key }}
dns_node_monitor_key = {{ creds.notification_keys.dns_node_monitor_key }}

[overage]
key = {{ corporate.creds.aws.overage.key }}
secret = {{ corporate.creds.aws.overage.secret }}

[pagerduty]
url = {{ corporate.creds.pagerduty.url }}
key = {{ corporate.creds.pagerduty.key }}
time_zone = {{ corporate.creds.pagerduty.time_zone }}

[partner_keys]
wpvalet = {{ corporate.creds.partner_keys.wpvalet }}
techops = {{ corporate.creds.partner_keys.techops }}
mywpe0 = {{ corporate.creds.admin_keys.mywpe }}

[rackspacecloud_uk]
username = {{ corporate.creds.rackspacecloud.uk.username }}
api_key = {{ corporate.creds.rackspacecloud.uk.api_key }}

[rackspacecloud_us]
username = {{ corporate.creds.rackspacecloud.us.username }}
api_key = {{ corporate.creds.rackspacecloud.us.api_key }}

{% if corporate.creds.rassle.token0 is defined and corporate.creds.rassle.token1 is defined %}
[rassle]
base_url = {{ rassle_base_url }}
token0 = {{ corporate.creds.rassle.token0 }}
token1 = {{ corporate.creds.rassle.token1 }}
{% endif %}

[salesforce]
url = {{ corporate.creds.salesforce.url }}
user = {{ corporate.creds.salesforce.user }}
pass = {{ corporate.creds.salesforce.pass }}
token = {{ corporate.creds.salesforce.token }}

[semrush]
key = {{ corporate.creds.semrush.key }}

[signup_sqs]
key = {{ corporate.creds.aws.signup.key }}
secret = {{ corporate.creds.aws.signup.secret }}
region = {{ corporate.creds.aws.signup.region }}
queue_url = {{ corporate.creds.aws.signup.queue_url }}

[sqs_queues]
reparent = {{ reparent_queue }}

[jenkins]
# Used to talk to the jenkins REST api to initiate jobs remotely
wpengine_bot_auth_token = {{ corporate.creds.jenkins.wpengine_bot_auth_token }}

[hipchat_jenkins]
{% if hipchat_jenkins_key is defined %}
key = {{ hipchat_jenkins_key }}
{% endif %}

[twilio]
account_sid = {{ corporate.creds.twilio.account_sid }}
auth_token = {{ corporate.creds.twilio.auth_token }}
number = {{ corporate.creds.twilio.number }}

[resource_manager]
# Uploads data used for phase generation, etc., to S3.
file_name = resource_manager.sqlite3
s3_bucket = wpe-resource-manager
s3_key = {{ corporate.creds.resource_manager.s3_key }}
s3_secret = {{ corporate.creds.resource_manager.s3_secret }}

[looker]
token = {{ corporate.creds.looker.token }}
secret = {{ corporate.creds.looker.secret }}
host = https://bi.tractbilling.com

[dionysus]
user = {{ corporate.creds.dionysus.user }}
pass = {{ corporate.creds.dionysus.pass }}
host = {{ corporate.creds.dionysus.host }}
schema = {{ corporate.creds.dionysus.schema }}
access = {{ corporate.creds.dionysus.access }}
secret = {{ corporate.creds.dionysus.secret }}
bucket = {{ corporate.creds.dionysus.bucket }}


# END CORPORATE-ONLY SECTION
{% endif %}

{# All items in this section are MUST be in group specific credential files.#}

# BEGIN GROUP SPECIFIC CREDS SECTION

{% if 'cm_servers' in group_names %}

[mailgun]
apikey = {{ creds_mailgun_apikey }}
sasl_password = {{ creds_mailgun_sasl_password }}

{% endif %}

{% if 'corporate_nas2' in group_names %}
[db_password_encryption]
access_key = {{ creds_db_password_encryption_access_key }}
secret_key = {{ creds_db_password_encryption_secret_key }}
s3_bucket = {{ creds_db_password_encryption_s3_bucket }}
s3_region = {{ creds_db_password_encryption_s3_region }}
{% if is_development is defined and is_development %}
encryption_key = {{ creds_db_password_encryption_encryption_key }}
{% endif %}
{% endif %}

# END GROUP SPECIFIC CREDS SECTION

{% if host_creds is defined %}

# BEGIN HOST SPECIFIC CREDS SECTION
{# #}
{# Please maintain alphabetization for organizational purposes #}

{% endif %}

{# Creds to the data team's dns/boopi api is specific to OD at the moment #}
{% if host_creds_boopi_key is defined %}
[boopi]
key = {{ host_creds_boopi_key }}
{% endif %}

{# Creds for overdrive access to the KPI service #}
{% if host_creds_cdn_kpi_user is defined %}
[overdrive_kpi]
kpi_cdn_user = {{ host_creds_cdn_kpi_user }}
kpi_cdn_pass = {{ host_creds_cdn_kpi_key }}
{% endif %}
