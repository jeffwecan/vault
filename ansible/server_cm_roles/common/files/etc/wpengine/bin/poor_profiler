#!/bin/bash
#
# Poor man's profiler.  Based off of http://poormansprofiler.org/
#

# Declare variables to identify the script
SCRIPT_NAME="poor_profiler"
SCRIPT_DESC="Poor Man's Profiler"

# Define variables for logging
LOGGING=0
LOG_DIR="`eval echo ~${SUDO_USER}`/script_logs"
LOG_FILE="$SCRIPT_NAME-`date +%Y-%m-%d`"

ITERATIONS=5
SLEEP=5
BINARY="apache"
STACK=5

read -r -d '' HELP_TEXT <<HELP_BLOCK
-h      Shows help screen and description
-l      Enable output logging to $LOG_DIR
-i      Iterations (default: $ITERATIONS)
-s      Sleep between iterations (default: $SLEEP)
-b      Binary to profile (default: $BINARY)
-d      Stack depth (default: $STACK)
HELP_BLOCK

while getopts ":hli:s:b:d:" opt; do
    case $opt in
        h)

            echo "Name: $SCRIPT_NAME"
            echo "Description: $SCRIPT_DESC"
            echo -e "$HELP_TEXT\n\n"
            exit 0
            ;;
        l)
            LOGGING=1
            if [ ! -e $LOG_DIR ]; then
                mkdir $LOG_DIR
                echo -e "\033[1;34mLog directory $LOG_DIR created for logging output.\033[m\017"
            elif [ ! -d $LOG_DIR ]; then
                echo -e "\033[0;31mLog directory appears to be a file. Disabling logging.\033[m\017"
                LOGGING=0
            fi
            ;;
        i)
            ITERATIONS=$OPTARG
            ;;
        s)
            SLEEP=$OPTARG
            ;;
        b)
            BINARY=$OPTARG
            ;;
        d)
            STACK=$OPTARG
            ;;
    esac
done

function do_stuff () {
    for x in $(seq 1 $ITERATIONS)
    do
        >&2 echo "Iteration $x of $ITERATIONS (sleep $SLEEP)"
        ps -ef | grep $BINARY | grep -v grep | awk '{print $2}' | xargs -n 1 gdb -ex "set pagination 0" -ex "thread apply all bt $STACK" --batch -p
        sleep $SLEEP
     done | \
     awk '
         BEGIN { s = ""; }
         /^Thread/ { print s; s = ""; }
         /^\#/ { if (s != "" ) { s = s "," $4} else { s = $4 } }
         END { print s }' | \
         sort | uniq -c | sort -r -n -k 1,1
}

# Log if logging
if [ $LOGGING -eq 1 ]; then
    do_stuff $@ | tee -a ${LOG_DIR}/${LOG_FILE}
else
    do_stuff $@
fi
