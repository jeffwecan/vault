min_packer_version: 0.12.0
variables:
  aws_region: us-east-1
  vault_version: 0.8.2
  consul_module_version: v0.0.2
  server_cm_version: v3.31
  consul_version: 0.9.3
  ca_public_key_path: null
  tls_public_key_path: null
  tls_private_key_path: null
  version: ''
  ansible_staging_directory: /opt/ansible-vault
  ansible_extra_arguments: '-vvvv,'
  consul_bootstrap_playbook: consul-aws-bootstrap.yml
  vault_bootstrap_playbook: vault-aws-bootstrap.yml
builders:
  - name: vault-ubuntu-16.04-ami
    ami_name: vault-consul-ubuntu-{{ user `version` | clean_ami_name}}
    ami_description: An Ubuntu 16.04 AMI that has Vault and Consul installed.
    instance_type: t2.micro
    region: '{{user `aws_region`}}'
    type: amazon-ebs
    encrypt_boot: true
    source_ami_filter:
      filters:
        virtualization-type: hvm
        architecture: x86_64
        name: '*ubuntu-xenial-16.04-amd64-server-*'
        block-device-mapping.volume-type: gp2
        root-device-type: ebs
      owners:
        - 099720109477
      most_recent: true
    ssh_username: ubuntu
    # force_deregister: true  # if we end up with the some AMI name, someone is probably rerunning a build?
  - name: vault-ubuntu-16.04-docker
    type: docker
    image: '{{user `test_image_name`}}:latest'
    pull: false
    commit: true
    changes:
      - CMD /usr/bin/supervisord
provisioners:

  # First ensure we are building an image with the latest software packages available
  - type: shell
    inline:
      # TODO: need a way to retry this due to internet weather, maybe just move it into our ansible?
      - DEBIAN_FRONTEND=noninteractive sudo apt update || true
      - sudo apt -y dist-upgrade
  - type: shell
    inline:
      - DEBIAN_FRONTEND=noninteractive sudo apt install -y python-pip
      - sudo pip install ansible

  # Ensure SSL secrets are available when running ansible. TODO: SSL storage should move to S3/KMS/Credstash?
  - type: file
    source: '{{user `ca_public_key_path`}}'
    destination: /tmp/vault.ca.crt.pem
  - type: file
    source: '{{user `tls_public_key_path`}}'
    destination: /tmp/vault.crt.pem
  - type: file
    source: '{{user `tls_private_key_path`}}'
    destination: /tmp/vault.key.pem

  # Create working directory for ansible-local provisioner
  # This path is also used for configuration of instances via an ansible-playbook invocation in a cloud-init script
  - type: shell
    inline:
      - sudo mkdir -p '{{user `ansible_staging_directory`}}'

  # If we're baking an AMI, we're connected as the ubuntu user
  - type: shell
    inline:
      - sudo chown -R ubuntu '{{user `ansible_staging_directory`}}'
    only:
      - vault-ubuntu-16.04-ami

  # Copy over the cloud-init / bootstraping ansible playbooks
  - type: file
    source: '{{ template_dir }}/../../ansible/{{user `consul_bootstrap_playbook`}}'
    destination: '{{user `ansible_staging_directory`}}/{{user `consul_bootstrap_playbook`}}'
  - type: file
    source: '{{ template_dir }}/../../ansible/{{user `vault_bootstrap_playbook`}}'
    destination: '{{user `ansible_staging_directory`}}/{{user `vault_bootstrap_playbook`}}'

  # Finally, use imaging playbook for building the base image
  - type: ansible-local
    staging_directory: '{{user `ansible_staging_directory`}}'
    playbook_file: '{{ template_dir }}/../../ansible/vault-consul-aws-imaging.yml'
    playbook_dir: '{{ template_dir }}/../../ansible/'
    role_paths:
      - '{{ template_dir }}/../../ansible/roles/'
    # TODO: Maybe look at capturing ansible results here via our callback plugins along with something like:
    # "... WPE_DEPLOY_LOG_DIR=/tmp/artifacts ANSIBLE_CALLBACK_PLUGINS=/ansible-callbacks .."
    command: 'ANSIBLE_FORCE_COLOR=1 PYTHONUNBUFFERED=1 ANSIBLE_DEBUG=true sudo ansible-playbook'
    extra_arguments: "{{user `ansible_extra_arguments`}}"
post-processors:
  - type: docker-tag
    repository: wpengine/vault-packer
    tag: '{{ user `version` }}'
    only:
      - vault-ubuntu-16.04-docker
  - type: docker-tag
    repository: wpengine/vault-packer
    tag: latest
    only:
      - vault-ubuntu-16.04-docker
